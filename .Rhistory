BMIs
BMIs
# Calculate BMI using the formula BMI = weight / height^2
BMIs <- weights / heights^2
BMIs
# Set the seed for reproducibility
set.seed(123)
# Generate 10,000 height values from a normal distribution with mean 1.6 and standard deviation 0.1
heights <- rnorm(10000, mean = 1.6, sd = 0.1)
BMIs
source("E:/SMTCW/q1.R")
BMIs
source("E:/SMTCW/q1.R")
source("E:/SMTCW/q1.R")
BMIs
source("E:/SMTCW/q1.R")
source("E:/SMTCW/q1.R")
var(BMIs)
source("E:/SMTCW/q1.R")
#var(BMIs)
#var(BMIs)
#var(BMIs)
mean(BMIs)
var(BMIs)
mean(BMIs>=25)
mean(BMIs>=25)
source("E:/SMTCW/q1.R")
mean(BMIs>=25)
source("E:/SMTCW/q2.R")
source("E:/SMTCW/q2.R")
source("E:/SMTCW/q2.R")
source("E:/SMTCW/q2.R")
source("E:/SMTCW/q2.R")
source("E:/SMTCW/q2.R")
mean(winning_prob_rule_A)
mean(winning_prob_rule_B)
# Print the results
cat("Winning probability of Player 1 under Rule A:", prop_a, "\n")
cat("Winning probability of Player 1 under Rule B:", prop_b, "\n")
serving <- c(1, 2)
# Randomly choose which player serves first
if (runif(1) < 0.5) {
serving <- c(1, 2)
} else {
serving <- c(2, 1)
}
# Simulate the game until one player wins two points
score <- c(0, 0)
while (max(score) < 2) {
if (serving[1] == 1) {
if (runif(1) < p_serve_1_win) {
score[1] <- score[1] + 1
} else {
serving <- rev(serving)
}
} else {
if (runif(1) < p_serve_2_win) {
score[2] <- score[2] + 1
} else {
serving <- rev(serving)
}
}
}
# Determine the winner of the game
if (score[1] > score[2]) {
winner <- "Player 1"
} else {
winner <- "Player 2"
}
# Return the winner of the game
return(winner)
# Function to simulate a game
simulate_game <- function(rule, p_serve_1_win, p_serve_2_win) {
# Randomly choose which player serves first
if (runif(1) < 0.5) {
serving <- c(1, 2)
} else {
serving <- c(2, 1)
}
# Simulate the game until one player wins two points
score <- c(0, 0)
while (max(score) < 2) {
if (serving[1] == 1) {
if (runif(1) < p_serve_1_win) {
score[1] <- score[1] + 1
} else {
serving <- rev(serving)
}
} else {
if (runif(1) < p_serve_2_win) {
score[2] <- score[2] + 1
} else {
serving <- rev(serving)
}
}
}
# Determine the winner of the game
if (score[1] > score[2]) {
winner <- "Player 1"
} else {
winner <- "Player 2"
}
# Return the winner of the game
return(winner)
}
# Simulate games under Rule A
games_a <- replicate(1000, simulate_game("A", 0.55, NA))
# Simulate games under Rule B
games_b <- replicate(1000, simulate_game("B", NA, 0.40))
# Calculate the proportion of games won by Player 1 under each service rule
prop_a <- mean(games_a == "Player 1")
prop_b <- mean(games_b == "Player 1")
# Print the results
cat("Winning probability of Player 1 under Rule A:", prop_a, "\n")
cat("Winning probability of Player 1 under Rule B:", prop_b, "\n")
set.seed(1234) # for reproducibility
# Function to simulate a game
simulate_game <- function(rule, p_serve_1_win, p_serve_2_win) {
# Randomly choose which player serves first
if (runif(1) < 0.5) {
serving <- c(1, 2)
} else {
serving <- c(2, 1)
}
# Simulate the game until one player wins two points
score <- c(0, 0)
while (max(score) < 2) {
if (serving[1] == 1) {
if (runif(1) < p_serve_1_win) {
score[1] <- score[1] + 1
} else {
serving <- rev(serving)
}
} else {
if (runif(1) < p_serve_2_win) {
score[2] <- score[2] + 1
} else {
serving <- rev(serving)
}
}
}
# Determine the winner of the game
if (score[1] > score[2]) {
winner <- "Player 1"
} else {
winner <- "Player 2"
}
# Return the winner of the game
return(winner)
}
# Simulate games under Rule A
games_a <- replicate(1000, simulate_game("A", 0.55, NA))
# Simulate games under Rule B
games_b <- replicate(1000, simulate_game("B", NA, 0.40))
# Calculate the proportion of games won by Player 1 under each service rule
prop_a <- mean(games_a == "Player 1")
prop_b <- mean(games_b == "Player 1")
# Print the results
cat("Winning probability of Player 1 under Rule A:", prop_a, "\n")
cat("Winning probability of Player 1 under Rule B:", prop_b, "\n")
set.seed(1234) # for reproducibility
# Function to simulate a game
simulate_game <- function(rule, p_serve_1_win, p_serve_2_win) {
# Randomly choose which player serves first
if (runif(1) < 0.5) {
serving <- c(1, 2)
} else {
serving <- c(2, 1)
}
# Simulate the game until one player wins two points
score <- c(0, 0)
while (max(score) < 2) {
if (serving[1] == 1) {
if (runif(1) < p_serve_1_win) {
score[1] <- score[1] + 1
} else {
serving <- rev(serving)
}
} else {
if (runif(1) < p_serve_2_win) {
score[2] <- score[2] + 1
} else {
serving <- rev(serving)
}
}
}
# Determine the winner of the game
if (score[1] > score[2]) {
winner <- "Player 1"
} else {
winner <- "Player 2"
}
# Return the winner of the game
return(winner)
}
# Simulate games under Rule A
games_a <- replicate(1000, simulate_game("A", 0.55, NA))
# Simulate games under Rule B
games_b <- replicate(1000, simulate_game("B", NA, 0.40))
# Calculate the proportion of games won by Player 1 under each service rule
prop_a <- mean(games_a == "Player 1")
prop_b <- mean(games_b == "Player 1")
# Print the results
cat("Winning probability of Player 1 under Rule A:", prop_a, "\n")
cat("Winning probability of Player 1 under Rule B:", prop_b, "\n")
source("E:/SMTCW/q2.R")
